{"version":3,"sources":["assets/kusama_word.png","components/Info.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MainBottom","styled","div","_templateObject","MyInput","input","_templateObject2","props","width","InfoBox","state","balData","balanceCheck","_callee","e","value","bal","claimData","pubKey","index","kusamaAddress","regenerator_default","a","wrap","_context","prev","next","target","length","console","log","abrupt","_this","frozenToken","claims","methods","balanceOf","call","sent","encodeAddress","pUtil","Number","setState","stop","react_default","createElement","name","onChange","this","React","Component","check","address","bs58","decode","Navbar","App_templateObject","Main","button","App_templateObject2","_templateObject3","MainLeft","_templateObject4","MainRight","_templateObject5","Spacer","_templateObject6","SucceedIcon","FontAwesomeIcon","_templateObject7","Boolean","status","_templateObject8","MySelect","select","_templateObject9","TextareaButton","Link","_templateObject10","_templateObject11","_templateObject12","DisabledText","_templateObject13","DisabledButton","_templateObject14","App","correctAmendment","defaultAccount","myCrypto","showAmend","web3","componentDidMount","w3","Web3","providers","HttpProvider","initializeContracts","_callee2","_context2","eth","Contract","FrozenToken","abi","Claims","inputChange","_e$target","notice","decodeAddress","Object","defineProperty","handleSelect","_this2","react_router_dom","src","Kusama","height","react_router","path","render","Fragment","href","defaultValue","disabled","hidden","lib","text","index_es","icon","faClipboard","style","position","resize","JSON","stringify","App_MyInput","faThumbsUp","faUnlink","color","Info","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.413b0ae7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kusama_word.3e581abc.png\";","import { encodeAddress } from '@polkadot/keyring';\nimport * as pUtil from '@polkadot/util';\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst MainBottom = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 90%;\n  margin-left: 3%;\n  margin-top: -1%;\n  margin-bottom: 3%;\n  background: white;\n  border-radius: 12px;\n  padding: 2%;\n`;\n\nconst MyInput = styled.input`\n  width: ${props => props.width}px !important;\n  border-color: black;\n  border-radius: 10px;\n  border-width: 2px;\n  padding: 2px;\n  padding-left: 3px;\n  font-size: 13px;\n  margin-bottom: 16px;\n  @media (max-width: 500px) {\n    width: 90% !important;\n  }\n`;\n\nclass InfoBox extends React.Component {\n\n  state = {\n    balData: null,\n  }\n\n\n  balanceCheck = async (e) => {\n    const { value } = e.target;\n\n    if (value.length !== 42) {\n      // Better ethereum address validity check.\n      console.log(value);\n      return;\n    }\n    if (!this.props.frozenToken || !this.props.claims) {\n      return;\n    }\n\n    let bal = await this.props.frozenToken.methods.balanceOf(value).call();\n    const claimData = await this.props.claims.methods.claims(value).call();\n    const { pubKey, index } = claimData;\n    let kusamaAddress;\n    if (pubKey !== '0x0000000000000000000000000000000000000000000000000000000000000000') {\n      kusamaAddress = encodeAddress(pUtil.hexToU8a(pubKey), 2);\n    }\n\n    bal = Number(bal) / 1000\n    \n    this.setState({\n      balData: {\n        bal,\n        index: index || null,\n        kusamaAddress: kusamaAddress || null,\n        pubKey: pubKey || null,\n      }\n    });\n  }\n\n  render() {\n    return (\n      <MainBottom>\n        <h2>Check your information:</h2>\n        <h4>Paste the Ethereum address to your DOT allocation below to check your Kusama address, index and balance:</h4>\n        <MyInput\n          width='500'\n          name='balance-check'\n          onChange={this.balanceCheck}\n        />\n        <p><b>Kusama address:</b> {(this.state.balData && this.state.balData.kusamaAddress) ? this.state.balData.kusamaAddress : 'None'}</p>\n        <p><b>Public key:</b> {(this.state.balData && this.state.balData.pubKey) ? this.state.balData.pubKey : 'None'}</p>\n        <p><b>Index:</b> {(this.state.balData && this.state.balData.index) ? this.state.balData.index : 'None'}</p> \n        <p><b>Balance:</b> {this.state.balData ? this.state.balData.bal : '0'} KSM</p>\n      </MainBottom>\n    );\n  }\n}\n\nexport default InfoBox;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClipboard, faThumbsUp, faUnlink } from '@fortawesome/free-solid-svg-icons';\nimport { decodeAddress, encodeAddress } from '@polkadot/keyring';\nimport * as pUtil from '@polkadot/util';\nimport bs58 from 'bs58';\nimport React from 'react';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport styled from 'styled-components';\n\nimport Web3 from 'web3';\n\n// Assets\nimport Kusama from './assets/kusama_word.png';\n\n// Components\nimport InfoBox from './components/Info';\n\n// Smart Contracts\nimport Claims from './build/contracts/Claims.json';\nimport FrozenToken from './build/contracts/FrozenToken.json';\n\n// #BC0066 - Hot Pink\n\nconst check = (address) => {\n  const decoded = pUtil.bufferToU8a(bs58.decode(address));\n  \n  return decoded[0] === 2;\n}\n\nconst Navbar = styled.div`\n  width: 100vw;\n  height: 60px;\n  background: black;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-around;\n  position: fixed;\n  color: white;\n  z-index: 100;\n`;\n\nconst NavButton = styled.button`\n  background: none;\n  border: none;\n  font-size: 16px;\n  color: black;\n  height: 100%;\n  width: 120px;\n  color: white;\n  :hover {\n    cursor: pointer;\n    background: white;\n    color: black;\n  }\n`;\n\nconst Main = styled.div`\n  width: 100%;\n  padding: 3%;\n  display: flex;\n  flex-direction: row-wrap;\n  padding-top: 0;\n  margin-top: 1%;\n  @media (max-width: 750px) {\n    flex-direction: column;\n    padding: 0;\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nconst MainLeft = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: left;\n  width: 42%;\n  margin-right: 1%;\n  background: rgba(255,255,255,1.0);\n  border-radius: 12px;\n  padding: 2%;\n  @media (max-width: 750px) {\n    width: 90%;\n    margin-bottom: 3%;\n  }\n`;\n\nconst MainRight = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: left;\n  width: 42%;\n  margin-left: 1%;\n  background: white;\n  border-radius: 12px;\n  padding: 2%;\n  padding-top: 0;\n  @media (max-width: 750px) {\n    width: 90%;\n    margin-bottom: 3%;\n    margin-top: -1%;\n  }\n`;\n\nconst Spacer = styled.div`\n  width: 100%;\n  height: 60px;\n  background: transparent;\n`;\n\nconst SucceedIcon = styled(FontAwesomeIcon)`\n  color: ${props => Boolean(props.status) ? 'green' : 'red'};\n`;\n\nconst MyInput = styled.input`\n  width: ${props => props.width}px !important;\n  border-color: black;\n  border-radius: 10px;\n  border-width: 2px;\n  padding: 2px;\n  padding-left: 3px;\n  font-size: 13px;\n  margin-bottom: 16px;\n  @media (max-width: 750px) {\n    width: 90% !important;\n  }\n`;\n\nconst MySelect = styled.select`\n  border-color: black;\n  border-radius: 10px;\n  border-width: 2px;\n  padding: 1px;\n  padding-left: 2px;\n  background: white;\n`;\n\nconst MyLink = styled(Link)`\n  width: 120px;\n  height: 100%;\n`;\n\nconst MyButton = styled.button`\n  border-color: black;\n  border-radius: 10px;\n  border-width: 2px;\n  padding: 10px;\n  background: white;\n  :hover {\n    background: black;\n    color: white;\n    cursor: pointer;\n  }\n`;\n\nconst TextareaButton = styled.button`\n  background: black;\n  color: white;\n  border-color: black;\n  :hover {\n    cursor: pointer;\n  }\n  @media (max-width: 750px) {\n    margin-left: 80%;\n  }\n`;\n\nconst DisabledText = styled.div`\n  background: #EBEBE4;\n  font-size: 12px;\n  color: #545454;\n  border-style: solid;\n  border-color: silver;\n  border-width: 0.25px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 100%;\n  height: 25px;\n  overflow-x: hidden;\n  position: relative;\n`;\n\nconst DisabledButton = styled.button`\n  position: absolute;\n  right: 0;\n  :hover {\n    cursor: pointer;\n    background: #fff;\n  }\n`;\n\n\nclass App extends React.Component {\n\n  state = {\n    claims: null,\n    correctAmendment: null,\n    defaultAccount: null,\n    frozenToken: null,\n    myCrypto: false,\n    pubKey: null,\n    showAmend: false,\n    status: null,\n    web3: null,\n  }\n\n  componentDidMount = async () => {\n\n  const w3 = new Web3(new Web3.providers.HttpProvider(\"https://mainnet.infura.io/v3/7121204aac9a45dcb9c2cc825fb85159\"));\n\n  this.setState({\n    web3: w3,\n  });\n\n  }\n\n  initializeContracts = async (web3) => {\n\n    const frozenToken = new web3.eth.Contract(FrozenToken.abi, \"0xb59f67A8BfF5d8Cd03f6AC17265c550Ed8F33907\");\n    const claims = new web3.eth.Contract(Claims.abi, \"0x9a1B58399EdEBd0606420045fEa0347c24fB86c2\");\n  \n    this.setState({\n      claims,\n      frozenToken,\n    });\n  }\n\n  inputChange = (e) => {\n    const { name, value } = e.target;\n    if (name === 'valid-check') {\n      let notice, pubKey, status;\n      // Check if its a properly encoding Kusama address.\n      if (!check(value)) {\n        try {\n          pubKey = pUtil.u8aToHex(decodeAddress(value));\n          // It's either a Substrate or Polkadot address.\n          // pubKey = 'This is not a Kusama address.'\n          notice = true;\n          status = true;\n        } catch (e) {\n          pubKey = 'invalid'\n          notice = false;\n          status = false;\n        }\n      } else {\n        try {\n          pubKey = pUtil.u8aToHex(decodeAddress(value, false,  2));\n          notice = false;\n          status = true;\n        } catch (e) {\n          pubKey = 'invalid';\n          notice = false;\n          status = false;\n        }\n      }\n\n      this.setState({\n        notice,\n        pubKey,\n        status,\n      })\n    }\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleSelect = (e) => {\n    const { value } = e.target;\n    if (value === 'MyCrypto') {\n      this.setState({\n        myCrypto: true,\n      });\n    }\n  }\n\n  render() {\n    if (this.state.web3 !== null && !this.state.claims && !this.state.frozenToken) {\n      this.initializeContracts(this.state.web3);\n    }\n\n    return (\n      <Router>\n      <div>\n        <Navbar>\n          <img src={Kusama} width='120px' height='20px'/>\n        </Navbar>\n        <Spacer/>\n        <Route\n          path='/'\n          render={() => (\n            <>\n              <Main>\n                <MainLeft>\n                  <h1>Claim KSM</h1>\n                  <br/>\n                  <p>This DApp will walk you through the process of claiming KSM. In order to claim KSM you need to have an allocation of DOTs.</p>\n                  <h2>Create a Kusama address</h2>\n                  <br/>\n                  <p>You will first need to create an account. This is the account that you will be claiming your KSM to, so make sure to extra precautions to keep it secure. For some tips on keeping your key safe, <a href='#'>see here</a>. Create an account using one of the following methods:</p>\n                  <ul>\n                    <li><a href=\"https://polkadot.js.org/apps/#/accounts\" target=\"_blank\">Polkadot UI</a> <b>(Recommended for most users)</b></li>\n                    <li><code><a href=\"https://guide.kusama.network/en/latest/start/claims/#using-subkey\">subkey</a></code> <b>(Most secure)</b></li>\n                    <li><a href=\"https://chrome.google.com/webstore/detail/enzyme/amligljifngdnodkebecdijmhnhojohh\" target=\"_blank\">Enzyme wallet</a> <b>(Chrome only)</b></li>\n                    <li><a href=\"https://polkawallet.io/#download\" target=\"_blank\">Polkawallet</a></li>\n                  </ul>\n                  <br/>\n                  <br/>\n                  <a href=\"https://guide.kusama.network/en/latest/start/claims/\" target=\"_blank\">See full step-by-step instructions.</a><br/>\n                  <a href=\"https://riot.im/app/#/room/#KSMAClaims:polkadot.builders\" target=\"_blank\">Need help? Join the Claims Support chat.</a>\n\n                </MainLeft>\n                <MainRight>\n                <h4>How will you claim?</h4>\n                <MySelect onChange={this.handleSelect} defaultValue=\"\">\n                  <option value=\"\" disabled hidden>Choose your method to claim</option>\n                  <option value=\"MyCrypto\">On Ethereum (before genesis)</option>\n                  <option value=\"On-chain\" disabled>On Kusama (after genesis)</option>\n                </MySelect>\n                {\n                  this.state.myCrypto &&\n                    <div>\n                      <h4>Claims contract:</h4>\n                      <DisabledText>\n                        0x9a1B58399EdEBd0606420045fEa0347c24fB86c2\n                        <CopyToClipboard text=\"0x9a1B58399EdEBd0606420045fEa0347c24fB86c2\">\n                          <DisabledButton>\n                            <FontAwesomeIcon icon={faClipboard}/>\n                          </DisabledButton>\n                        </CopyToClipboard>\n                      </DisabledText>\n                      <h4>ABI:</h4>\n                      <div style={{ position: 'relative' }}>\n                        <textarea style={{width: '100%', height: '100px', resize: 'none'}} disabled>{JSON.stringify(Claims.abi)}</textarea>\n                        <CopyToClipboard text={JSON.stringify(Claims.abi)}>\n                          <TextareaButton>click to copy</TextareaButton>\n                        </CopyToClipboard>\n                      </div>\n                      <h4>What is your Kusama or Substrate address?</h4>\n                      <div>\n                        <MyInput\n                          width='450'\n                          name='valid-check'\n                          onChange={this.inputChange}\n                        />\n                        {' '}<SucceedIcon icon={Boolean(this.state.status) ? faThumbsUp : faUnlink} status={this.state.status}/>\n                      </div>\n                      {\n                        this.state.notice &&\n                          <p style ={{ color: 'red' }}>This is a Substrate address. Your Kusama address will be: {encodeAddress(pUtil.hexToU8a(this.state.pubKey), 2)}</p>\n                      }\n                      <p>Public Key:</p>\n                      <DisabledText>\n                        {this.state.pubKey || ''}\n                        <CopyToClipboard text={this.state.pubKey || ''}>\n                          <DisabledButton>\n                            <FontAwesomeIcon icon={faClipboard}/>\n                          </DisabledButton>\n                        </CopyToClipboard>\n                      </DisabledText>\n                      <br />\n                      <p>You will need to <a href=\"https://github.com/MyCryptoHQ/MyCrypto/releases\" target=\"_blank\">download</a> and use MyCrypto locally to make this transaction.</p>\n                      <a href=\"https://guide.kusama.network/en/latest/start/dot-holders/\" target=\"_blank\">Instructions for DOT holders.</a><br/>\n                    </div>\n                }\n                </MainRight>\n              </Main>\n              <InfoBox claims={this.state.claims || null} frozenToken={this.state.frozenToken || null} />\n            </>\n          )}/>\n      </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}